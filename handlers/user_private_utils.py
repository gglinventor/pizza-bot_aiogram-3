from aiogram import Bot, types
from aiogram.types import InputMediaPhoto
from sqlalchemy.ext.asyncio import AsyncSession

from database.orm_query import orm_get_banner, orm_get_products, orm_add_to_cart, orm_get_user_carts, orm_delete_from_cart, orm_reduce_product_in_cart, orm_get_question, orm_get_questions
from keyboards.inline_kb import get_user_main_buttons, get_user_catalog_buttons, get_products_buttons, get_user_cart, get_user_questions, get_user_answer, get_user_help, get_user_inline_support
from keyboards.pagination import Paginator


async def main_menu(session, level, menu_name):
    banner = await orm_get_banner(session, menu_name)
    image = InputMediaPhoto(media=banner.image, caption=banner.description)
    keyboards = get_user_main_buttons(level=level, sizes=(2,2,2))
    
    return image, keyboards


async def catalog(session, level, menu_name, bot):
    banner = await orm_get_banner(session, menu_name)
    image = InputMediaPhoto(media=banner.image, caption=banner.description)
    categories = bot.food_category
    
    keyboards = get_user_catalog_buttons(level=level, categories=categories, sizes=(2,1,2))
    
    return image, keyboards


def pages(paginator: Paginator):
    buttons = dict()
    if paginator.has_previous():
        buttons["‚óÄ –ü—Ä–µ–¥."] = 'previous'
        
    if paginator.has_naxt():
        buttons["–°–ª–µ–¥. ‚ñ∂"] = 'next'
        
    return buttons


async def products(session, level, category, page, bot):
    products = await orm_get_products(session, category_id=category)
    if products:
        paginator = Paginator(products, page=page)
        product = paginator.get_page()[0]
    
        text = f"<strong>{product.name}</strong>\n{product.info}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {round(product.price, 2)} {product.valute}"
        if product.comment != '' and product.comment != None:
            text += f'\n{product.comment}'
        image = InputMediaPhoto(media=product.image,
            caption=text+f"\n<strong>–¢–æ–≤–∞—Ä {paginator.page} –∏–∑ {paginator.pages}</strong>")
    
        pagination_buttons = pages(paginator)
    
        keyboards = get_products_buttons(level=level, category=category, page=page, pagination_buttons=pagination_buttons, product_id=product.id)
    
    else:
        categories = bot.food_category
        banner = await orm_get_banner(session, 'main')
        image = InputMediaPhoto(media=banner.image, caption=f'–¢–æ–≤–∞—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{categories[category - 1]}" –Ω–µ—Ç ü§î')
    
        keyboards = get_user_main_buttons(level=0, sizes=(2,2,2))
        
    return image, keyboards


async def carts(session, level, menu_name, page, user_id, product_id):
    if menu_name == 'delete':
        await orm_delete_from_cart(session, user_id, product_id)
        if page > 1:
            page -= 1
    elif menu_name == 'decrement':
        result = await orm_reduce_product_in_cart(session, user_id, product_id)
        if page > 1 and result == False:
            page -= 1
    elif menu_name == 'increment':
        await orm_add_to_cart(session=session, user_id=user_id, product_id=product_id)
    
    carts = await orm_get_user_carts(session=session, user_id=user_id)

    if not carts:
        banner = await orm_get_banner(session=session, banner_name='cart')
        image = InputMediaPhoto(media=banner.image, caption=banner.description)
        keyboards = get_user_cart(level=level)
        
    else:
        paginator = Paginator(carts, page=page)
        cart = paginator.get_page()[0]
        
        cart_price = round(cart.quantity * cart.product.price, 2)
        all_price = round(sum(cart.quantity * cart.product.price for cart in carts), 2)
        image = InputMediaPhoto(media=cart.product.image, caption=f"<strong>{cart.product.name}</strong>\
            \n{round(cart.product.price, 2)} {cart.product.valute} x {cart.quantity} = {cart_price} {cart.product.valute}\
            \n–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤ –≤–æ –≤—Å–µ–π –∫–æ—Ä–∑–∏–Ω–µ: {all_price} {cart.product.valute}\n–¢–æ–≤–∞—Ä {paginator.page} –∏–∑ {paginator.pages} —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ")
        
        pagination_buttons = pages(paginator)
        keyboards = get_user_cart(level=level, page=page, pagination_buttons=pagination_buttons, product_id=cart.product.id, user_id=user_id)
        
    return image, keyboards


async def questions(session: AsyncSession, menu_name: str):
    questions = await orm_get_questions(session)
    keyboards = get_user_questions(questions=questions)
    
    banner = await orm_get_banner(session, menu_name)
    image = InputMediaPhoto(media=banner.image, caption=banner.description)
    
    return image, keyboards


async def answer(session: AsyncSession, level: int, menu_name: str, ques_id: int):
    question = await orm_get_question(session, ques_id)
    keyboards = get_user_answer(level=level)
    
    banner = await orm_get_banner(session, menu_name)
    image = InputMediaPhoto(media=banner.image, caption=f'<strong>{question.name}</strong>\n\n{question.info}')
    
    return image, keyboards    


async def get_user_content(session: AsyncSession, level: int, menu_name: str, bot: Bot | None = None, category: int | None = None, page: int | None = None, product_id: int | None = None, user_id: int | None = None, ques_id: int | None = None):
    if level == 0:
        return await main_menu(session, level, menu_name)
    elif level == 1:
        return await catalog(session, level, menu_name, bot)
    elif level == 2:
        return await products(session, level, category, page, bot)
    elif level == 3:
        return await carts(session, level, menu_name, page, user_id, product_id)
    elif level == 4:
        return await questions(session, menu_name)
    elif level == 5:
        return await answer(session, level, menu_name=menu_name, ques_id=ques_id)


async def helping(level: int):
    text = '–£ –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏? –°–ª–µ–¥—É—é—â–∏–π –Ω–∞–±–æ—Ä –∫–Ω–æ–ø–æ–∫ –ø–æ—Å—Ç–∞—Ä–∞–µ—Ç—Å—è —Ä–µ—à–∏—Ç—å –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É!\n\n1)–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–í—Å–µ –∫–æ–º–∞–Ω–¥—ã"\n\n2)–ï—Å–ª–∏ –∫–∞–∫–∞—è-—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—à–∏–±–∫–∞"\n\n3)–ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–º–æ–∂–µ—Ç, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞"'
    
    keyboards = get_user_help(level=level)
    
    return text, keyboards


async def helping_2(level: int, type_help: str):
    answers = {'all_command': '/start - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞\n–ü–æ—Å–ª–µ –µ—ë –Ω–∞–∂–∞—Ç–∏—è –ø—Ä–∏—Å—ã–ª–∞–µ—Ç—Å—è –∏–Ω–ª–∞–π–Ω-–∫–∞—Ä—Ç–æ—á–∫–∞ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏:\n–ü—Ä–∏ –Ω–∞–∂–∞–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏ "–¢–æ–≤–∞—Ä—ã" –∏ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã –ø–∏—Ü—Ü–µ—Ä–∏–∏, –∞ –∫–Ω–æ–ø–∫–æ–π "–ö—É–ø–∏—Ç—å" –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ –∏—Ö –≤ –∫–æ—Ä–∑–∏–Ω—É\n–ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–ö–æ—Ä–∑–∏–Ω–∞" –≤—ã —É–≤–∏–¥–∏—Ç–µ –≤–∞—à–∏ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ\n–ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–û –Ω–∞—Å" –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≤–µ–¥–µ–Ω–∏–∏\n–ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–í–æ–ø—Ä–æ—Å—ã" –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ–∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n–ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–û–ø–ª–∞—Ç–∞" –≤—ã –ø–æ–ª–∏—á–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã\n–ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–î–æ—Å—Ç–∞–≤–∫–∞" –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏\n\n/help - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–º–æ—â–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n–ü–æ—Å–ª–µ –µ—ë –Ω–∞–∂–∞—Ç–∏—è –ø—Ä–∏—Å—ã–ª–∞–µ—Ç—Å—è –∏–Ω–ª–∞–π–Ω-–∫–∞—Ä—Ç–æ—á–∫–∞ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏:\n–ü—Ä–∏ –Ω–∞–∂–∞–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏ "–í—Å–µ –∫–æ–º–∞–Ω–¥—ã" –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –≤ –±–æ—Ç–µ\n–ü—Ä–∏ –Ω–∞–∂–∞–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏ "–û—à–∏–±–∫–∞" –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–∞–∫ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤ –±–æ—Ç–µ\n–ü—Ä–∏ –Ω–∞–∂–∞–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏ "–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞" –≤—ã —É–∑–Ω–∞–µ—Ç–µ, –∫–∞–∫ –∏ –∫–æ–≥–¥–∞ –º—ã —Å–º–æ–∂–µ–º –≤–∞–º –ø–æ–º–æ—á—å, –µ—Å–ª–∏ –≤—Å—ë –≤—ã—à–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –≤–∞–º –Ω–µ –ø–æ–º–æ–≥–ª–æ\n\n/info - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ',
                'error': '1)–ù–ï–í–ù–ò–ú–ê–¢–ï–õ–¨–ù–û–°–¢–¨\n–ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –≥—Ä—É–ø–ø–µ https://t.me/+7GW4GjeWaUI5MzMy –≤–æ–∑–º–æ–∂–Ω–æ –≤—ã –Ω–µ –∑–∞–º–µ—Ç–∏–ª–∏ –≤–∞–∂–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∫–∞—Å–∞—é—â–∏—Ö—Å—è –±–æ—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: "–í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π" –∏ –¥—Ä—É–≥–∏–µ, –∏–ª–∏ –≤—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–ª–µ–¥–æ–≤–∞–ª–∏ —É–∫–∞–∑–∞–Ω–∏—è–º –±–æ—Ç–∞. –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —É —Å–µ–±—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É, —ç—Ç–æ –æ—á–µ–Ω—å —á–∞—Å—Ç–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!\n\n2)–ù–ï–ú–ù–û–ì–û –¢–ï–†–ü–ï–ù–ò–Ø\n–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–∫–æ—Ç—Ä–æ–µ –≤—Ä–µ–º—è, –≤–æ–∑–º–æ–∂–Ω–æ –±–æ—Ç –±—ã–ª –Ω–∞–≥—Ä—É–∂–µ–Ω —Ä–∞–±–æ—Ç–æ–π –∏ –µ—â—ë –Ω–µ —É—Å–ø–µ–ª –æ—Ç–≤–µ—Ç–∏—Ç—å, –≤–æ–∑–º–æ–∂–Ω–æ —Å–µ—Ä–≤–µ—Ä–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–∞ –∑–∞–≤–∏—Å–ª–∏ –∏ –Ω–µ –æ—Ç–≤–µ—á–∞—é—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å, –Ω–æ —Å—É—Ç—å –≤—Å–µ–≥–æ —ç—Ç–æ–≥–æ –≤ —Ç–æ–º, —á—Ç–æ –Ω–∞–¥–æ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å –∏–ª–∏ –µ—â—ë —Ä–∞–∑ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –±–æ—Ç—É.',
                'support': f'–ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∏—è –≤ –∫–Ω–æ–ø–∫–µ "–û—à–∏–±–∫–∞" –≤–∞–º –Ω–µ –ø–æ–º–æ–≥–ª–∏, —Ç–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–º–æ—â—å—é –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É https://t.me/GGL_Inventor –Ω–æ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞ –ø–æ–º–æ—â—å—é, –µ—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ç—Ä—É–¥–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä - —á–µ–ª–æ–≤–µ–∫ –∏ –æ—Ç–≤–µ—Ç–∏—Ç –Ω–µ —Å—Ä–∞–∑—É!' }
    
    text = answers.get(type_help)
    keyboards = get_user_inline_support()
    
    return text, keyboards


async def get_user_support(level: int, type_help: str | None = None):
    if level == 0:
        return await helping(level)
    if level == 1:
        return await helping_2(level, type_help)